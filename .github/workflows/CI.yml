name: Build and Deploy
env:
  DEBUG: napi:*
  APP_NAME: uroborosql-fmt-napi
  WORKING_DIR: crates/uroborosql-fmt-napi
  MACOSX_DEPLOYMENT_TARGET: "10.13"
permissions:
  contents: write
  id-token: write
"on":
  push:
    branches: main
    paths-ignore:
      - "**/*.md"
      - LICENSE
      - "**/*.gitignore"
      - .editorconfig
      - docs/**
  pull_request: null
  workflow_dispatch: null
jobs:
  test:
    uses: ./.github/workflows/test.yml
  build-napi:
    needs: test
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              yarn build
              strip -x *.node
          - host: windows-latest
            build: |
              git config --system core.longpaths true 
              yarn build
            target: x86_64-pc-windows-msvc
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              yarn build --target aarch64-apple-darwin
              strip -x *.node
          - host: windows-latest
            build: |
              git config --system core.longpaths true
              yarn build --target aarch64-pc-windows-msvc
            target: aarch64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -e &&
              yarn build --target x86_64-unknown-linux-gnu &&
              strip *.node
          # TODO: support for aarch64-unknown-linux-gnu
          # - host: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          #   docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
          #   build: |-
          #     set -e &&
          #     yarn build --target aarch64-unknown-linux-gnu &&
          #     aarch64-unknown-linux-gnu-strip *.node

    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    defaults:
      run:
        working-directory: ./crates/uroborosql-fmt-napi
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 18
          check-latest: true
          cache: yarn
          cache-dependency-path: ./${{ env.WORKING_DIR }}/yarn.lock
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.10.1
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Setup node x86
        uses: actions/setup-node@v3
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 18
          check-latest: true
          cache: yarn
          cache-dependency-path: ./${{ env.WORKING_DIR }}/yarn.lock
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build/${{ env.WORKING_DIR }}"
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.WORKING_DIR }}/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  build-wasm:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: Setup emsdk
        uses: mymindstorm/setup-emsdk@v11
        with:
          version: 3.1.35

      - name: Setup cargo
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: wasm32-unknown-emscripten

      - name: Build tree-sitter-sql
        run: cargo build --package tree-sitter-sql --target wasm32-unknown-emscripten --release
        env:
          EMCC_CFLAGS: -O3

      - name: Build
        run: cargo build --package uroborosql-fmt-wasm --target wasm32-unknown-emscripten --release
        env:
          EMCC_CFLAGS: |
            -O3
            -o ./wasm/uroborosql-fmt.js
            -s ALLOW_MEMORY_GROWTH=1
            -s STACK_SIZE=5MB
            -s EXPORTED_FUNCTIONS=['_format_sql','_get_result_address','_get_error_msg_address']
            -s EXPORTED_RUNTIME_METHODS=ccall

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: wasm-and-js
          path: |
            wasm/uroborosql-fmt.js
            wasm/uroborosql-fmt.wasm
          if-no-files-found: error

  deploy-to-gh-pages:
    if: github.repository == 'future-architect/uroborosql-fmt' &&
      contains('refs/heads/main', github.ref) && github.event_name == 'push'
    needs: [build-wasm, build-napi]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true
          cache: yarn
          cache-dependency-path: ./${{ env.WORKING_DIR }}/yarn.lock
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: yarn install

      # *.node のダウンロード
      # TODO: まとめてダウンロードできないか？
      - name: Download .node file for aarch64-apple-darwin
        uses: actions/download-artifact@v3
        with:
          name: bindings-aarch64-apple-darwin
          path: ./${{ env.WORKING_DIR }}
      - name: Download .node file for x86_64-apple-darwin
        uses: actions/download-artifact@v3
        with:
          name: bindings-x86_64-apple-darwin
          path: ./${{ env.WORKING_DIR }}
      - name: Download .node file for aarch64_pc_windows_msvc
        uses: actions/download-artifact@v3
        with:
          name: bindings-aarch64-pc-windows-msvc
          path: ./${{ env.WORKING_DIR }}
      - name: Download .node file for x86_64_pc_windows_msvc
        uses: actions/download-artifact@v3
        with:
          name: bindings-x86_64-pc-windows-msvc
          path: ./${{ env.WORKING_DIR }}
      - name: Download .node file for x86_64_unknown-linux-gnu
        uses: actions/download-artifact@v3
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: ./${{ env.WORKING_DIR }}

      - name: Package
        run: |
          cd ${{ env.WORKING_DIR }}
          mkdir -p repo
          cp index.js repo/index.js
          cp index.d.ts repo/index.d.ts
          cp package.json repo/package.json
          mv *.node repo
          cd repo
          npm pack
          cd ..
          cd ..
          cd ..
          mv ${{ env.WORKING_DIR }}/repo/*.tgz ./wasm

      - name: Download wasm
        uses: actions/download-artifact@v3
        with:
          name: wasm-and-js
          path: ./wasm

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./wasm
          force_orphan: true
